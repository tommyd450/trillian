kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: enterprise-contract
  labels:
    build.appstudio.redhat.com/pipeline: "enterprise-contract"
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'token'
      name: GH_TOKEN
      type: string
    - description: 'account'
      name: GITHUB_USER_NAME
      default: ""
      type: string
    - description: 'EMAIL'
      name: GITHUB_USER_EMAIL
      default: ""
      type: string
    - description: 'file to update'
      name: FILE_TO_UPDATE
      default: ""
      type: string
    - name: POLICY_CONFIGURATION
      type: string
      description: |
        Name of the policy configuration (EnterpriseContractConfiguration
        object) to use. `namespace/name` or `name` syntax supported. If
        namespace is omitted the namespace where the task runs is used.
      default: enterprise-contract-service/redhat
    - name: SSL_CERT_DIR
      type: string
      description: |
        Path to a directory containing SSL certs to be used when communicating
        with external services. This is useful when using the integrated registry
        and a local instance of Rekor on a development cluster which may use
        certificates issued by a not-commonly trusted root CA. In such cases,
        "/var/run/secrets/kubernetes.io/serviceaccount" is a good value. Multiple
        paths can be provided by using the ":" separator.
      default: ""
  results:
    - name: TEST_OUTPUT
      value: $(tasks.verify.results.TEST_OUTPUT)
  tasks:
    - name: verify
      params:
        - name: POLICY_CONFIGURATION
          value: "$(params.POLICY_CONFIGURATION)"
        - name: IMAGES
          value: "$(params.SNAPSHOT)"
        - name: SSL_CERT_DIR
          value: "$(params.SSL_CERT_DIR)"
        # It's confusing for users to see a passing taskrun that represents a failing EC test.
        # For that reason let's have the taskrun fail when there are EC violations. Also, if
        # this is set to false (IIUC), it's not possible to have the IntegrationTest gate the
        # deploy to the devel environment work, which is what users expect to be able to do.
        - name: STRICT
          value: "true"
        - name: PUBLIC_KEY
          value: "k8s://openshift-pipelines/public-key"
        - name: IGNORE_REKOR
          value: "true"
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: quay.io/enterprise-contract/ec-task-bundle:snapshot@sha256:ce600537e1fb66113a36d2c4a6663756b0b512e3362de34720aa1c39e05ecc3e
          - name: name
            value: verify-enterprise-contract
          - name: kind
            value: task
  finally:
    - name: snapshotter
      description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: LABEL
          value: $(context.pipelineRun.name)
        - name: GH_TOKEN
          value: $(params.GH_TOKEN)
        - name: GITHUB_USER_NAME
          value: $(params.GITHUB_USER_NAME)
        - name: GITHUB_USER_EMAIL
          value: $(params.GITHUB_USER_EMAIL)
        - name: FILE_TO_UPDATE
          value: $(params.FILE_TO_UPDATE) 
        - name: EC_RESULTS
          value: $(tasks.verify.results.TEST_OUTPUT)
      taskSpec:
        params:
        - name: SNAPSHOT
        - name: GH_TOKEN
        - name: GITHUB_USER_EMAIL
        - name: GITHUB_USER_NAME
        - name: FILE_TO_UPDATE
        - name: EC_RESULTS
        results:
        - name: TEST_OUTPUT
          description: Test output
        steps:
        - image: registry.redhat.io/openshift4/ose-cli@sha256:4257542c6e7343abd048f8b1c1e06afeed8d4e4bfafe8621fcfa32b92c77b644
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          - name: LABEL
            value: $(context.pipelineRun.name)
          - name: GH_TOKEN
            value: $(params.GH_TOKEN)
          - name: GITHUB_USER_EMAIL
            value: $(params.GITHUB_USER_EMAIL)
          - name: GITHUB_USER_NAME
            value: $(params.GITHUB_USER_NAME)
          - name: CHECK_RUN_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/check-run-id']
          - name: FILE_TO_UPDATE
            value: $(params.FILE_TO_UPDATE)
          - name: EC_RESULTS
            value: $(tasks.verify.results.TEST_OUTPUT)
          script: |
            max_checks=30
            sleep_interval=10


            update_files()
            {
              git config --global user.email "${GITHUB_USER_EMAIL}"
              git config --global user.name "${GITHUB_USER_NAME}"
              git clone https://ret:${GH_TOKEN}@github.com/tommyd450/trillian.git
              cd trillian
              git remote -v
              git fetch origin
              git checkout trilltest
              echo "Updated" >> release.yaml
              echo "2"
              ls -a
              git remote -v
              git add release.yaml
              git commit -m "Updating"
              git status
              git push origin trilltest:trilltest -f

            }

            check_ec_status(){
              local attempts=0
              b=$(oc get snapshots)
              echo ${b}
              while [[ $attempts -lt $max_attempts ]]; do
                EC_POD=$(oc get pods -l pac.test.appstudio.openshift.io/check-run-id=${CHECK_RUN_ID} | awk '{if (($3 ~ "Completed")&&($1 ~ "verify-pod")) print $1}')
                if [-z "$EC_POD"]; then
                  EC_STATUS=$(oc get pod "$EC_POD" -o jsonpath='{.status.phase}')
                  if [ ${EC_STATUS} == "Succeeded"]; then
                    return 0
                  else
                    echo "$EC_POD is in state: $EC_STATUS. Retrying in $sleep_interval seconds..."
                  fi
                else
                  echo "No verify pods running sleeping and checking again"
                fi

                sleep ${sleep_interval}
                attempts=$((attempts+1))
              done
              return 1
            }


            snapshot_fetcher(){
              check_ec_status
              if [ $? -ne 0 ]; then
                  echo "Pod status check failed. Exiting the script."
                  exit 1
              fi
              update_files
            }

            echo ${EC_RESULTS}
            snapshot_fetcher
       
            echo -e "Example test task for the Snapshot:\n ${SNAPSHOT}"
            echo -e "Test label: \n ${LABEL}"
            echo -e "TEST ID \n ${CHECK_RUN_ID}"
            echo -e "Token: \n ${GH_TOKEN}"
            jq ${SNAPSHOT}
            // Run custom tests for the given Snapshot here
            // After the tests finish, record the overall result in the RESULT variable
            
            RESULT="$LABEL"
            // Output the standardized TEST_OUTPUT result in JSON form
            TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
              '{result: $RESULT, timestamp: $date, failures: 0, successes: 1, warnings: 0}')
            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)