---
kind: Pipeline
apiVersion: tekton.dev/v1
metadata:
  name: Snapshot-Query
spec:
  params:
    - name: snapshot
      type: string
    - name: git_repo
      type: string
    - name: github_secret_name
      type: string
    - name: github_secret_token
      type: string
    - name: releaseVersion
      type: string
  workspaces:
    - name: release-workspace
  tasks:
    - name: snapshottest
      description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
      workspaces:
        - name: release-workspace
      params:
        - name: SNAPSHOT
          value: "$(params.snapshot)"
        - name: GIT_REPO
          value: "$(params.git_repo)"
        - name: GIT_SECRET_NAME
          value: "$(params.github_secret_name)"
        - name: GIT_SECRET_TOKEN
          value: "$(params.github_secret_token)"
        - name: RELEASEVERSION
          value: "$(params.releaseVersion)"
      taskSpec:
        params:
          - name: SNAPSHOT
            type: string
          - name: GIT_REPO
            type: string
          - name: GIT_SECRET_NAME
            type: string
          - name: GIT_SECRET_TOKEN
            type: string
          - name: RELEASEVERSION
            type: string
        steps:
          - name: teststep
            image: "registry.redhat.io/openshift4/ose-cli-rhel9@sha256:da73326271164f5581db65ce760c03896980243a55079d0036f044e6fa3d960e"
            env:
              - name: GIT_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: $(params.GIT_SECRET_NAME)
                    key: $(params.GIT_SECRET_TOKEN)
            script: |
              #!/usr/bin/env sh
              dnf -y install jq
              dnf -y install gh
              dnf -y install sed
              dnf -y install git

              echo $(params.SNAPSHOT)
              SNAPSHOTID=$(echo $(params.SNAPSHOT))
              snapshotid=$(echo ${SNAPSHOTID##*/})

              fetch_and_config_repo(){
                git config --global user.email "tdalton@redhat.com"
                git config --global user.name "Release-Coordinator-Bot"
                git clone https://REB:${GIT_TOKEN}@github.com/securesign/releases.git
                cd releases
                git remote set-url origin https://REB:${GIT_TOKEN}@github.com/securesign/releases.git
                git fetch origin
                if [ `git branch --list $(params.RELEASEVERSION)` ]; then
                  git checkout $(params.RELEASEVERSION)
                else
                  git checkout -b $(params.RELEASEVERSION)
                fi
              }

              ## This function will generate the folder structure for the specific release.
              create_directory_structure(){
                  echo "Attempting to create Directory Strcuture"
                  if [ -d "$(pwd)/$(params.RELEASEVERSION)" ]; then
                      echo "Directory Structure already exists skipping."
                  else
                      mkdir "$(pwd)/$(params.RELEASEVERSION)" "$(pwd)/$(params.RELEASEVERSION)/releasePlans" \
                      "$(pwd)/$(params.RELEASEVERSION)/releases" "$(pwd)/$(params.RELEASEVERSION)/testingResources"
                  fi

                  if [ -f "$(pwd)/$(params.RELEASEVERSION))/quay-coordinates.json" ]; then
                  echo "Quay Coordinate File Exists"
                  else
                      echo "Creating Quay Coordinate File"
                      echo "{}" >> "$(pwd)/$(params.RELEASEVERSION)/quay-coordinates.json"
                  fi
              }

              fetch_and_config_repo
              create_directory_structure

              cd "$(pwd)/$(params.RELEASEVERSION)"
              readarray components < <(oc get snapshot ${snapshotid} -n rhtas-tenant -o json | jq .spec.components[].containerImage | cut -d "\"" -f 2)
              echo ${components}
              APP_NAME=$(oc get snapshot ${snapshotid} -n rhtas-tenant -o json | jq '.spec.application' | cut -d "\"" -f 2)
              prod_path="$(pwd)/quay-coordinates.json"
              tmp_path="$(pwd)/quay-tmp-coordinates.json"
              day=$(date +'%Y-%m-%d')
              current_time=$(date +'%H-%M-%S')

              jq_update_file() {
                  if [[ $? != 0 ]]; then
                      echo "jq could not parse file" 
                      exit $?
                  fi
                  echo "Update"
                  mv $tmp_path $prod_path
              }

              ## This will Genereate the Json Entries within the quay-coordinates.json file.
              ## Code taken from our helper scripts repo 
              generate_components() {
                  echo "${APP_NAME} does not exist within the coordinates file adding entry to the coordinates file"
                  echo ${APP_NAME}
                  jq --arg APPLICATION_NAME ${APP_NAME} --arg SNAPSHOT_NAME "$(params.SNAPSHOT)" '.[($APPLICATION_NAME)]={"snapshot_name": $SNAPSHOT_NAME}' $prod_path > $tmp_path
                  jq_update_file
                  component_names=($(oc get snapshot $(params.SNAPSHOT) -o json | jq '.spec.components[].name' | cut -d "\"" -f 2))
                  component_images=($(oc get snapshot $(params.SNAPSHOT) -o json | jq '.spec.components[].containerImage' | cut -d "\"" -f 2))

                  for index in "${!component_names[@]}"; do 
                      if [[ $logging == 0 ]]; then
                          echo "${component_names[$index]}: ${component_images[$index]}"
                      fi
                      tmp_component_name=${component_names[$index]}
                      tmp_component_image=${component_images[$index]}
                      jq --arg APPLICATION_NAME "${APP_NAME}" --arg COMPONENT_NAME "$tmp_component_name" --arg COMPONENT_IMAGE "$tmp_component_image" '.[($APPLICATION_NAME)][($COMPONENT_NAME)]=($COMPONENT_IMAGE)' $prod_path > $tmp_path  
                      jq_update_file
                      
                  done
              }

              regex_sha_updater() {
                  printf "The ${APP_NAME} app does exist within the coordinates file,\nUpdating file with Image from $(params.SNAPSHOT).\n\n"
                  for c in ${components[@]}
                  do
                      imageAddress=$(echo ${c} | grep -o '^[^@]*')
                      imageDigest=$(echo ${c})
                      sed -i --regexp-extended "s|${imageAddress}(.*)\"|${imageDigest}\"|g" quay-coordinates.json
                  done
              }

              APPEXISTS=$(jq -r  '.|has("${APP_NAME}")' quay-coordinates.json)

              if [[ ${APPEXISTS} == true ]] ;then
                  regex_sha_updater

              elif [[ ${APPEXISTS} == false ]] ;then
                  generate_components
              fi

              git remote set-url origin https://REB:${GIT_TOKEN}@github.com/securesign/releases.git
              git remote -v
              git add .
              git commit -m "Updating Snapshots coordinates on ${day} at ${current_time}"
              git push origin $(params.RELEASEVERSION)
